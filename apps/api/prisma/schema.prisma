generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Unit {
  id           String    @id @default(uuid()) @db.Uuid
  code         String    @unique
  name         String
  group        UnitGroup
  isBase       Boolean   @default(false) @map("is_base")
  toBaseFactor Decimal   @default(1) @map("to_base_factor") @db.Decimal(15, 6)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  products     Product[]

  @@index([group])
  @@index([isBase])
  @@map("units")
}

model ProductGroup {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  code            String           @unique
  description     String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  groupAttributes GroupAttribute[]
  products        Product[]

  @@map("product_groups")
}

model Attribute {
  id                     String                  @id @default(uuid()) @db.Uuid
  name                   String
  type                   AttributeType
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  options                AttributeOption[]
  groupAttributes        GroupAttribute[]
  productAttributeValues ProductAttributeValue[]

  @@map("attributes")
}

model AttributeOption {
  id          String    @id @default(uuid()) @db.Uuid
  attributeId String    @map("attribute_id") @db.Uuid
  option      String
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([attributeId, option])
  @@map("attribute_options")
}

model GroupAttribute {
  id            String       @id @default(uuid()) @db.Uuid
  groupId       String       @map("group_id") @db.Uuid
  attributeId   String       @map("attribute_id") @db.Uuid
  required      Boolean      @default(false)
  uniqueInGroup Boolean      @default(false) @map("unique_in_group")
  useInName     Boolean      @default(false) @map("use_in_name")
  sortOrder     Int          @default(0) @map("sort_order")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  attribute     Attribute    @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  productGroup  ProductGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, attributeId])
  @@map("group_attributes")
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  email           String           @unique
  password        String
  firstName       String           @map("first_name")
  lastName        String           @map("last_name")
  role            UserRole
  isEmailVerified Boolean          @default(false) @map("is_email_verified")
  emailVerifiedAt DateTime?        @map("email_verified_at")
  refreshToken    String?          @map("refresh_token")
  clientId        String?          @map("client_id") @db.Uuid
  supplierId      String?          @unique @map("supplier_id") @db.Uuid
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  assignedClients Client[]         @relation("ClientAssignedTo")
  preferences     UserPreferences?
  client          Client?          @relation("ClientUsers", fields: [clientId], references: [id], onDelete: Cascade)
  supplier        Supplier?        @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([role])
  @@map("users")
}

model UserPreferences {
  id                 String     @id @default(uuid()) @db.Uuid
  userId             String     @unique @map("user_id") @db.Uuid
  theme              Theme      @default(LIGHT)
  dateFormat         DateFormat @default(DD_MM_YYYY) @map("date_format")
  timeFormat         TimeFormat @default(HOUR_24) @map("time_format")
  currency           Currency   @default(BAM)
  autoSaveForms      Boolean    @default(true) @map("auto_save_forms")
  emailNotifications Boolean    @default(false) @map("email_notifications")
  language           Language   @default(EN)
  timezone           String     @default("Europe/Sarajevo")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Client {
  id                String       @id @default(uuid()) @db.Uuid
  name              String
  type              ClientType   @default(COMPANY)
  contactPerson     String?      @map("contact_person")
  email             String       @db.VarChar(190)
  phone             String?      @db.VarChar(40)
  website           String?      @db.VarChar(190)
  taxNumber         String?      @unique @map("tax_number") @db.VarChar(64)
  billingStreet     String?      @map("billing_street")
  billingCity       String?      @map("billing_city") @db.VarChar(120)
  billingZip        String?      @map("billing_zip") @db.VarChar(20)
  billingCountry    String?      @map("billing_country") @db.VarChar(120)
  paymentTerms      PaymentTerms @default(D30) @map("payment_terms")
  preferredCurrency Currency     @default(BAM) @map("preferred_currency")
  creditLimit       Decimal      @default(0) @map("credit_limit") @db.Decimal(12, 2)
  status            ClientStatus @default(ACTIVE)
  leadSource        String?      @map("lead_source") @db.VarChar(80)
  lastContactedAt   DateTime?    @map("last_contacted_at")
  nextFollowupAt    DateTime?    @map("next_followup_at")
  tags              String[]
  clientCode        String?      @unique @map("client_code") @db.VarChar(40)
  assignedToId      String?      @map("assigned_to_id") @db.Uuid
  notes             String?
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  carts             Cart?
  assignedTo        User?        @relation("ClientAssignedTo", fields: [assignedToId], references: [id])
  invoices          Invoice[]
  orders            Order[]
  pricingOverrides  Pricing[]
  users             User[]       @relation("ClientUsers")

  @@index([status])
  @@index([billingCity])
  @@index([email])
  @@index([taxNumber])
  @@map("clients")
}

model Supplier {
  id                 String                     @id @default(uuid()) @db.Uuid
  name               String
  taxId              String?                    @unique @map("tax_id")
  email              String?
  phone              String?
  address            String?
  city               String?
  country            String?
  isActive           Boolean                    @default(true) @map("is_active")
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")
  pricingOverrides   Pricing[]
  preferredSuppliers ProductPreferredSupplier[]
  products           Product[]
  users              User?

  @@index([name])
  @@index([isActive])
  @@map("suppliers")
}

model Product {
  id                 String                     @id @default(uuid()) @db.Uuid
  sku                String                     @unique
  name               String?
  description        String?
  category           String?
  supplierId         String                     @map("supplier_id") @db.Uuid
  isActive           Boolean                    @default(true) @map("is_active")
  deletedAt          DateTime?                  @map("deleted_at")
  groupId            String?                    @map("group_id") @db.Uuid
  unitId             String?                    @map("unit_id") @db.Uuid
  status             ProductStatus              @default(REGISTRATION)
  storageType        StorageType                @default(AMBIENT) @map("storage_type")
  brand              String?
  shelfLifeDays      Int?                       @map("shelf_life_days")
  weightPerItem      Decimal?                   @map("weight_per_item") @db.Decimal(10, 6)
  variationKey       String?                    @map("variation_key")
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")
  cartItems          CartItem[]
  invoiceItems       InvoiceItem[]
  orderItems         OrderItem[]
  pricing            Pricing[]
  attributeValues    ProductAttributeValue[]
  preferredSuppliers ProductPreferredSupplier[]
  productGroup       ProductGroup?              @relation(fields: [groupId], references: [id])
  supplier           Supplier                   @relation(fields: [supplierId], references: [id])
  unit               Unit?                      @relation(fields: [unitId], references: [id])

  @@unique([groupId, variationKey])
  @@index([supplierId])
  @@index([sku])
  @@index([isActive])
  @@index([deletedAt])
  @@index([status])
  @@index([groupId])
  @@index([brand])
  @@map("products")
}

model ProductAttributeValue {
  id          String    @id @default(uuid()) @db.Uuid
  productId   String    @map("product_id") @db.Uuid
  attributeId String    @map("attribute_id") @db.Uuid
  value       Json
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeId])
  @@map("product_attribute_values")
}

model ProductPreferredSupplier {
  id          String   @id @default(uuid()) @db.Uuid
  productId   String   @map("product_id") @db.Uuid
  supplierId  String   @map("supplier_id") @db.Uuid
  priority    Int      @default(1)
  isPrimary   Boolean  @default(false) @map("is_primary")
  supplierSku String?  @map("supplier_sku")
  price       Decimal? @db.Decimal(10, 2)
  currency    String?  @db.VarChar(3)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([productId, supplierId])
  @@map("product_preferred_suppliers")
}

model Pricing {
  id              String    @id @default(uuid()) @db.Uuid
  productId       String    @map("product_id") @db.Uuid
  clientId        String?   @map("client_id") @db.Uuid
  supplierId      String?   @map("supplier_id") @db.Uuid
  price           Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  taxRate         Decimal   @default(0) @map("tax_rate") @db.Decimal(5, 2)
  discountPercent Decimal   @default(0) @map("discount_percent") @db.Decimal(5, 2)
  effectiveFrom   DateTime  @default(now()) @map("effective_from")
  effectiveTo     DateTime? @map("effective_to")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  client          Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier        Supplier? @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([productId, clientId, supplierId, effectiveFrom])
  @@index([productId])
  @@index([clientId])
  @@index([supplierId])
  @@index([effectiveFrom, effectiveTo])
  @@map("pricing")
}

model Invoice {
  id              String        @id @default(uuid()) @db.Uuid
  invoiceNumber   String        @unique @map("invoice_number")
  clientId        String        @map("client_id") @db.Uuid
  status          InvoiceStatus @default(QUOTE)
  subtotal        Decimal       @default(0) @db.Decimal(12, 2)
  taxTotal        Decimal       @default(0) @map("tax_total") @db.Decimal(12, 2)
  discountTotal   Decimal       @default(0) @map("discount_total") @db.Decimal(12, 2)
  grandTotal      Decimal       @default(0) @map("grand_total") @db.Decimal(12, 2)
  remainingAmount Decimal       @default(0) @map("remaining_amount") @db.Decimal(12, 2)
  currency        String        @default("USD")
  discountPercent Decimal       @default(0) @map("discount_percent") @db.Decimal(5, 2)
  issuedAt        DateTime?     @map("issued_at")
  sentAt          DateTime?     @map("sent_at")
  paidAt          DateTime?     @map("paid_at")
  voidedAt        DateTime?     @map("voided_at")
  dueDate         DateTime?     @map("due_date")
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  auditTrail      AuditLog[]
  items           InvoiceItem[]
  client          Client        @relation(fields: [clientId], references: [id])
  order           Order?

  @@index([clientId])
  @@index([status])
  @@index([issuedAt])
  @@index([invoiceNumber])
  @@map("invoices")
}

model InvoiceItem {
  id              String   @id @default(uuid()) @db.Uuid
  invoiceId       String   @map("invoice_id") @db.Uuid
  productId       String   @map("product_id") @db.Uuid
  sku             String
  productName     String   @map("product_name")
  quantity        Decimal  @db.Decimal(10, 3)
  unitPrice       Decimal  @map("unit_price") @db.Decimal(10, 2)
  taxRate         Decimal  @map("tax_rate") @db.Decimal(5, 2)
  discountPercent Decimal  @default(0) @map("discount_percent") @db.Decimal(5, 2)
  lineSubtotal    Decimal  @map("line_subtotal") @db.Decimal(12, 2)
  lineTax         Decimal  @map("line_tax") @db.Decimal(12, 2)
  lineDiscount    Decimal  @map("line_discount") @db.Decimal(12, 2)
  lineTotal       Decimal  @map("line_total") @db.Decimal(12, 2)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])

  @@index([invoiceId])
  @@index([productId])
  @@map("invoice_items")
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id") @db.Uuid
  action     String
  userId     String?  @map("user_id") @db.Uuid
  changes    Json?
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  invoice    Invoice  @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  clientId  String     @unique @map("client_id") @db.Uuid
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  items     CartItem[]
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  cartId    String   @map("cart_id") @db.Uuid
  productId String   @map("product_id") @db.Uuid
  quantity  Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  orderNumber String      @unique @map("order_number")
  clientId    String      @map("client_id") @db.Uuid
  status      OrderStatus @default(PENDING)
  invoiceId   String?     @unique @map("invoice_id") @db.Uuid
  subtotal    Decimal     @default(0) @db.Decimal(12, 2)
  taxTotal    Decimal     @default(0) @map("tax_total") @db.Decimal(12, 2)
  grandTotal  Decimal     @default(0) @map("grand_total") @db.Decimal(12, 2)
  currency    String      @default("EUR")
  notes       String?
  shippedAt   DateTime?   @map("shipped_at")
  deliveredAt DateTime?   @map("delivered_at")
  cancelledAt DateTime?   @map("cancelled_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  items       OrderItem[]
  client      Client      @relation(fields: [clientId], references: [id])
  invoice     Invoice?    @relation(fields: [invoiceId], references: [id])

  @@index([clientId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid()) @db.Uuid
  orderId      String   @map("order_id") @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  sku          String
  productName  String   @map("product_name")
  quantity     Decimal  @db.Decimal(10, 3)
  unitPrice    Decimal  @map("unit_price") @db.Decimal(10, 2)
  taxRate      Decimal  @map("tax_rate") @db.Decimal(5, 2)
  lineSubtotal Decimal  @map("line_subtotal") @db.Decimal(12, 2)
  lineTax      Decimal  @map("line_tax") @db.Decimal(12, 2)
  lineTotal    Decimal  @map("line_total") @db.Decimal(12, 2)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

enum UserRole {
  EMPLOYEE
  CLIENT_USER
  SUPPLIER_USER
}

enum InvoiceStatus {
  QUOTE
  ISSUED
  SENT
  PAID
  VOID
}

enum OrderStatus {
  PENDING
  INVOICE_CREATED
  INVOICE_ISSUED
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum PaymentTerms {
  ON_RECEIPT
  D7
  D15
  D30
  D45
  D60
}

enum Currency {
  BAM
  EUR
  USD
  GBP
  CHF
}

enum UnitGroup {
  WEIGHT
  VOLUME
  LENGTH
  COUNT
}

enum ProductStatus {
  REGISTRATION
  ACTIVE
  INACTIVE
  DISCONTINUED
  DRAFT
}

enum StorageType {
  AMBIENT
  CHILLED
  FROZEN
  HAZMAT
  DRY
}

enum AttributeType {
  TEXT
  NUMBER
  DECIMAL
  BOOLEAN
  DATE
  LIST
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum DateFormat {
  DD_MM_YYYY
  MM_DD_YYYY
  YYYY_MM_DD
  DD_MMM_YYYY
  MMM_DD_YYYY
}

enum TimeFormat {
  HOUR_12
  HOUR_24
}

enum Language {
  EN
  BS
  HR
  SR
}
